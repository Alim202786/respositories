import psycopg2
import csv
import os

def connect():
    return psycopg2.connect(
        host="localhost",
        dbname="postgres",     
        user="postgres",
        password="alim_788607131523",  
        client_encoding="UTF8"
    )

def create_table():
    conn = connect()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS phonebook (
            id SERIAL PRIMARY KEY,
            name VARCHAR(50),
            phone VARCHAR(20)
        )
    """)
    conn.commit()
    cur.close()
    conn.close()
    print("–¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞!")

def insert_manual():
    conn = connect()
    cur = conn.cursor()
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    cur.execute("INSERT INTO phonebook (name, phone) VALUES (%s, %s)", (name.strip(), phone.strip()))
    conn.commit()
    cur.close()
    conn.close()
    print("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

def insert_from_csv():
    conn = connect()
    cur = conn.cursor()
    file_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è CSV-—Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, contacts.csv): ").strip()
    script_dir = os.path.dirname(os.path.abspath(__file__))
    full_path = os.path.join(script_dir, file_name)
    try:
        with open(full_path, "r", encoding="utf-8") as file:
            reader = csv.reader(file)
            for row in reader:
                print("üëâ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ CSV:", row)
                if len(row) == 2:
                    name, phone = row
                    cur.execute("INSERT INTO phonebook (name, phone) VALUES (%s, %s)", (name.strip(), phone.strip()))
        conn.commit()
        print("–î–∞–Ω–Ω—ã–µ –∏–∑ CSV —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    except FileNotFoundError:
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞.")
    cur.close()
    conn.close()

def update_data():
    conn = connect()
    cur = conn.cursor()
    name = input("–ß—å—ë –∏–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: ")
    new_phone = input("–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    cur.execute("UPDATE phonebook SET phone = %s WHERE name = %s", (new_phone.strip(), name.strip()))
    conn.commit()
    cur.close()
    conn.close()
    print("–ù–æ–º–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω.")

def query_data():
    conn = connect()
    cur = conn.cursor()
    name_filter = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
    cur.execute("SELECT * FROM phonebook WHERE name ILIKE %s", (f"%{name_filter.strip()}%",))
    rows = cur.fetchall()
    for row in rows:
        print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")
    if not rows:
        print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    cur.close()
    conn.close()

def delete_data():
    conn = connect()
    cur = conn.cursor()
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    cur.execute("DELETE FROM phonebook WHERE name = %s", (name.strip(),))
    conn.commit()
    cur.close()
    conn.close()
    print("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

def menu():
    create_table()
    while True:
        print("\nMENU PHONEBOOK:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV-—Ñ–∞–π–ª–∞")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        print("4. –ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
        print("5. –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("0. –í—ã–π—Ç–∏")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        if choice == "1":
            insert_manual()
        elif choice == "2":
            insert_from_csv()
        elif choice == "3":
            update_data()
        elif choice == "4":
            query_data()
        elif choice == "5":
            delete_data()
        elif choice == "0":
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    menu()